
def _xrdcp_executor(wb, copyjob: CopyFile, xrd_cp_args: XrdCpArgs, printout: str = '') -> Optional[CopyFile]:
    """xrdcp standalone copy executor"""
    if not HAS_XROOTD:
        print_err("XRootD not found")
        return None

    # MANDATORY DEFAULTS, always used
    makedir = bool(True)  # create the parent directories when creating a file
    posc = bool(True)  # persist on successful close; Files are automatically deleted should they not be successfully closed.
    sources = int(1)  # max number of download sources; we (ALICE) do not rely on parallel multi-source downloads

    # passed arguments
    overwrite = xrd_cp_args.overwrite
    batch = xrd_cp_args.batch
    tpc = xrd_cp_args.tpc
    timeout = xrd_cp_args.timeout
    hashtype = xrd_cp_args.hashtype
    rate = xrd_cp_args.rate

    src = copyjob.src
    dst = copyjob.dst
    lfn = copyjob.lfn
    isUpload = copyjob.isUpload
    token_data = copyjob.token_request

    cksum_mode = 'none'
    cksum_type = cksum_preset = ''
    if isUpload:
        cksum_mode = 'source'
        cksum_type = 'md5'
        cksum_preset = token_data['md5']
    else:  # for downloads we already have the md5 value, lets use that
        cksum_mode = 'target'
        cksum_type, cksum_preset = get_hash_meta(src)
        # If the remote file had no hash registered
    if not cksum_type or not cksum_preset:
        logging.error('COPY:: MD5 missing for %s', lfn)

    # let's customize the environment of xrdcp command
    xrdcp_env = os.environ.copy()

    # Customize environment based on size and other information
    # XRD_CPPARALLELCHUNKS, XRD_CPCHUNKSIZE, XRD_STREAMTIMEOUT, timeout

    xrdcp_cmdline = ['xrdcp', '-f', '-N', '-P']

    # -C | --cksum type[:value|print|source]
    # obtains the checksum of type (i.e. adler32, crc32, md5 or zcrc32) from the source, computes the checksum at the destination, and veri‐
    # fies that they are the same. If auto is chosen as the checksum type, xrdcp will try to automatically infer the right checksum type based
    # on source/destination configuration, source file type (metalink, ZIP), and available checksum plug-ins. If a value is specified, it is
    # used as the source checksum.  When print is specified, the checksum at the destination is printed but is not verified.
    # --rm-bad-cksum
    # Remove the target file if checksum verification failed (enables also POSC semantics).
    if not isUpload:  # is download
        xrdcp_cmdline.extend(['--cksum', f'{cksum_type}:{cksum_preset}', '--rm-bad-cksum'])

    # --xrate-threshold rate
    # If the transfer rate drops below given threshold force the client to use different source or if no more sources are available fail the transfer.
    if rate:
        xrdcp_cmdline.extend(['--xrate-threshold', rate])

    # PRINTING OF beginning ! here or in manager .. there is a need of index/total information

    if isUpload:
        xrdcp_cmdline.extend([src, dst])
        # status = subprocess.run(xrdcp_cmdline, encoding = 'utf-8', errors = 'replace', timeout = timeout, capture_output = True, env = xrdcp_env)  # pylint: disable=subprocess-run-check  # nosec
        # do commit
        # do end print
        # return copyjob if fail else None

    # process download
    list_of_replicas = get_url_meta(src)
    for replica in list_of_replicas:
        new_xrdcp_cmdline = xrdcp_cmdline.copy()
        new_xrdcp_cmdline.extend([replica, dst])
        # status = subprocess.run(new_xrdcp_cmdline, encoding = 'utf-8', errors = 'replace', timeout = timeout, capture_output = True, env = xrdcp_env)  # pylint: disable=subprocess-run-check  # nosec
        # if success:
        #     do end print
        #     break

# DOWNLOAD
# CopyFile(
#        src='/home/adrian/tmp/f3c361b6-8677-5585-acfb-56ced24e36d5.meta4',
#        dst='/home/adrian/work-ALICE/jalien_py/test_area/test.sh~',
#        isUpload=False,
#        token_request={},
#        lfn='/alice/cern.ch/user/a/asevcenc/test.sh~'
#     )

# UPLOAD
# CopyFile(
#        src='/home/adrian/work-ALICE/jalien_py/test_area/test2.sh',
#        dst='root://neos.nipne.ro:1094//02/10490/4d798722-9786-11ef-8ad0-8030e01e6668?xrd.wantprot=unix&authz=-----BEGIN SEALED CIPHER-----\nqgdhc9kDcjjKsxudKLnwvYg6NyJNAQqLkL-EREsd7dgunQcPe8LO7hxq3zzqMlY94Ur+xpv3iNQJ\nDyQBrVNUmvC3x5D0n+oSvR6XMEr5va1QkdwK8nsyhB6KiAonlFDSvXfPPSNI3sq2VNeORmE5LV9g\nl4M7B3R0S+yC4X-hT9E=\n-----END SEALED CIPHER-----\n-----BEGIN SEALED ENVELOPE-----\nAAAAgJdVSgHfLO9Pwrl4YVwKt5AaK1QvK3n0D5X+JRnTYXxldLuQDV7WdqrS3noP8FCBqNl6DCnF\nsyCrBJdXPPBnNKuWH8sOdCHLzR5G27KhVcMBfvajK+8sCM8JGoXjgqEjDC0TVMe66ufAe7mwVnBo\nfQYcau-2aLZFUWvVOWjsgwHENeloV-OtJzhscaBoZTe3GJggEEl9A3gd6q3IlLkYFaTtDMRSey-k\noknKl1JdK1CN9UDi+Nw4nuj6C4djgomqLJR87m0XWDTIc-0OSbrNMWblQlI0BteNVrJDuJLKfogu\n-lM95gJ7-MUxTI21FgciF6cgiUgn2ZZdGQwSWUGIFmZ+AMvhUUcibN1Rtj7sDR9GYU9x-3wdfFQV\nD0uggZd656ctGgv0Z8OS86xx3dXdwC4AKdfOrwSBKqgN7pUAe701c+Aawl8637kAixK0klkXPpYk\nYjfCHgKtcrjIHwRzjKu3kAAFKtbvjCuabQfBelmVyu75onhg8FOWqEhEUgeTO1fKlRL3yxgqGHZy\nvWrBT7+Kr+nRy5Jv52pecgNx4oCsfusWv1M335buizhASbN99IUJv6IXvdTsk5IINkmia0jLq7-X\nm5OWsZ0hw+bObVl6+QYW0cSBrYjq8qBN608KRX752RxxXWwa9UjtERBcktS320B60n5cTtPwsrCz\nuKWD+o1eIBuQOO7Mv6EZQB6Tk5rhSwGZhzI1xuy0ncsiwcDktOg3Cc+tjRB8mu9dB6iuc7wRK34w\n18rDMMbmoiXbeabidTWTEQoFgCyTfZ-1ef1JMSwyLmyV-YxgqT3oIO1rOBSZgMutd+UAu8Ib6AN3\nKS75++IRDJy-nvqQn9H1NvqtglN7euZo9k5maUVWuJ0bc-JXtmxFP5Bxnthe4smMJg==\n-----END SEALED ENVELOPE-----\n&scitag.flow=335&eos.app=cliUpload',
#        isUpload=True,
#        token_request={
#               'envelope': '-----BEGIN SEALED CIPHER-----\nqgdhc9kDcjjKsxudKLnwvYg6NyJNAQqLkL-EREsd7dgunQcPe8LO7hxq3zzqMlY94Ur+xpv3iNQJ\nDyQBrVNUmvC3x5D0n+oSvR6XMEr5va1QkdwK8nsyhB6KiAonlFDSvXfPPSNI3sq2VNeORmE5LV9g\nl4M7B3R0S+yC4X-hT9E=\n-----END SEALED CIPHER-----\n-----BEGIN SEALED ENVELOPE-----\nAAAAgJdVSgHfLO9Pwrl4YVwKt5AaK1QvK3n0D5X+JRnTYXxldLuQDV7WdqrS3noP8FCBqNl6DCnF\nsyCrBJdXPPBnNKuWH8sOdCHLzR5G27KhVcMBfvajK+8sCM8JGoXjgqEjDC0TVMe66ufAe7mwVnBo\nfQYcau-2aLZFUWvVOWjsgwHENeloV-OtJzhscaBoZTe3GJggEEl9A3gd6q3IlLkYFaTtDMRSey-k\noknKl1JdK1CN9UDi+Nw4nuj6C4djgomqLJR87m0XWDTIc-0OSbrNMWblQlI0BteNVrJDuJLKfogu\n-lM95gJ7-MUxTI21FgciF6cgiUgn2ZZdGQwSWUGIFmZ+AMvhUUcibN1Rtj7sDR9GYU9x-3wdfFQV\nD0uggZd656ctGgv0Z8OS86xx3dXdwC4AKdfOrwSBKqgN7pUAe701c+Aawl8637kAixK0klkXPpYk\nYjfCHgKtcrjIHwRzjKu3kAAFKtbvjCuabQfBelmVyu75onhg8FOWqEhEUgeTO1fKlRL3yxgqGHZy\nvWrBT7+Kr+nRy5Jv52pecgNx4oCsfusWv1M335buizhASbN99IUJv6IXvdTsk5IINkmia0jLq7-X\nm5OWsZ0hw+bObVl6+QYW0cSBrYjq8qBN608KRX752RxxXWwa9UjtERBcktS320B60n5cTtPwsrCz\nuKWD+o1eIBuQOO7Mv6EZQB6Tk5rhSwGZhzI1xuy0ncsiwcDktOg3Cc+tjRB8mu9dB6iuc7wRK34w\n18rDMMbmoiXbeabidTWTEQoFgCyTfZ-1ef1JMSwyLmyV-YxgqT3oIO1rOBSZgMutd+UAu8Ib6AN3\nKS75++IRDJy-nvqQn9H1NvqtglN7euZo9k5maUVWuJ0bc-JXtmxFP5Bxnthe4smMJg==\n-----END SEALED ENVELOPE-----\n&scitag.flow=335&eos.app=cliUpload',
#               'url': 'root://neos.nipne.ro:1094//02/10490/4d798722-9786-11ef-8ad0-8030e01e6668',
#               'guid': '4d798722-9786-11ef-8ad0-8030e01e6668',
#               'se': 'ALICE::NIHAM::EOS',
#               'tags': '[disk, legoinput]',
#               'nSEs': '4',
#               'md5': '72c23cf3ecdade4ffb79f66d725d14b4',
#               'size': '259',
#               'qos_specs': [],
#               'SElist_specs': [],
#               'SElist': ['ALICE::UPB::EOS', 'ALICE::BRATISLAVA::SE', 'ALICE::ISS::EOS', 'ALICE::NIHAM::EOS'],
#               'file': '/home/adrian/work-ALICE/jalien_py/test_area/test2.sh',
#               'lfn': '/alice/cern.ch/user/a/asevcenc/test2.sh'
#                },
#        lfn='/alice/cern.ch/user/a/asevcenc/test2.sh'
#     )


# keep it commented until is needed - dead code for now
# def XrdCopy_xrdcp(job_list: list, xrd_cp_args: XrdCpArgs) -> list:  # , printout: str = ''
#     """XRootD copy command :: the actual XRootD copy process"""
#     if not HAS_XROOTD:
#         print_err("XRootD not found or lower version than 5.3.3")
#         return []
#     if not xrd_cp_args:
#         print_err("cp arguments are not set, XrdCpArgs tuple missing")
#         return []
#     # overwrite = xrd_cp_args.overwrite
#     # batch = xrd_cp_args.batch
#     # makedir = xrd_cp_args.makedir
#
#     # ctx = mp.get_context('forkserver')
#     # q = ctx.JoinableQueue()
#     # p = ctx.Process(target=_xrdcp_copyjob, args=(q,))
#     # p.start()
#     # print(q.get())
#     # p.join()
#     for copy_job in job_list:
#         if DEBUG: logging.debug('\nadd copy job with\nsrc: %s\ndst: %s\n', copy_job.src, copy_job.dst)
#         # xrdcp_cmd = f' {copy_job.src} {copy_job.dst}'
#         if DEBUG: print_out(copy_job)
#     return []




